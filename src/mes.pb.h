// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mes.proto
// Protobuf C++ Version: 5.29.3

#ifndef mes_2eproto_2epb_2eh
#define mes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mes_2eproto;
namespace TestTask {
namespace Messages {
class FastResponse;
struct FastResponseDefaultTypeInternal;
extern FastResponseDefaultTypeInternal _FastResponse_default_instance_;
class RequestForFastResponse;
struct RequestForFastResponseDefaultTypeInternal;
extern RequestForFastResponseDefaultTypeInternal _RequestForFastResponse_default_instance_;
class RequestForSlowResponse;
struct RequestForSlowResponseDefaultTypeInternal;
extern RequestForSlowResponseDefaultTypeInternal _RequestForSlowResponse_default_instance_;
class SlowResponse;
struct SlowResponseDefaultTypeInternal;
extern SlowResponseDefaultTypeInternal _SlowResponse_default_instance_;
class WrapperMessage;
struct WrapperMessageDefaultTypeInternal;
extern WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
}  // namespace Messages
}  // namespace TestTask
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace TestTask {
namespace Messages {

// ===================================================================


// -------------------------------------------------------------------

class SlowResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTask.Messages.SlowResponse) */ {
 public:
  inline SlowResponse() : SlowResponse(nullptr) {}
  ~SlowResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SlowResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SlowResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SlowResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SlowResponse(const SlowResponse& from) : SlowResponse(nullptr, from) {}
  inline SlowResponse(SlowResponse&& from) noexcept
      : SlowResponse(nullptr, std::move(from)) {}
  inline SlowResponse& operator=(const SlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlowResponse& operator=(SlowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlowResponse* internal_default_instance() {
    return reinterpret_cast<const SlowResponse*>(
        &_SlowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SlowResponse& a, SlowResponse& b) { a.Swap(&b); }
  inline void Swap(SlowResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlowResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlowResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SlowResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SlowResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SlowResponse& from) { SlowResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SlowResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestTask.Messages.SlowResponse"; }

 protected:
  explicit SlowResponse(::google::protobuf::Arena* arena);
  SlowResponse(::google::protobuf::Arena* arena, const SlowResponse& from);
  SlowResponse(::google::protobuf::Arena* arena, SlowResponse&& from) noexcept
      : SlowResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectedClientCountFieldNumber = 1,
  };
  // required uint32 connected_client_count = 1;
  bool has_connected_client_count() const;
  void clear_connected_client_count() ;
  ::uint32_t connected_client_count() const;
  void set_connected_client_count(::uint32_t value);

  private:
  ::uint32_t _internal_connected_client_count() const;
  void _internal_set_connected_client_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestTask.Messages.SlowResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SlowResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t connected_client_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mes_2eproto;
};
// -------------------------------------------------------------------

class RequestForSlowResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForSlowResponse) */ {
 public:
  inline RequestForSlowResponse() : RequestForSlowResponse(nullptr) {}
  ~RequestForSlowResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestForSlowResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestForSlowResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestForSlowResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestForSlowResponse(const RequestForSlowResponse& from) : RequestForSlowResponse(nullptr, from) {}
  inline RequestForSlowResponse(RequestForSlowResponse&& from) noexcept
      : RequestForSlowResponse(nullptr, std::move(from)) {}
  inline RequestForSlowResponse& operator=(const RequestForSlowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestForSlowResponse& operator=(RequestForSlowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestForSlowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestForSlowResponse* internal_default_instance() {
    return reinterpret_cast<const RequestForSlowResponse*>(
        &_RequestForSlowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RequestForSlowResponse& a, RequestForSlowResponse& b) { a.Swap(&b); }
  inline void Swap(RequestForSlowResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestForSlowResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestForSlowResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestForSlowResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestForSlowResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestForSlowResponse& from) { RequestForSlowResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestForSlowResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestTask.Messages.RequestForSlowResponse"; }

 protected:
  explicit RequestForSlowResponse(::google::protobuf::Arena* arena);
  RequestForSlowResponse(::google::protobuf::Arena* arena, const RequestForSlowResponse& from);
  RequestForSlowResponse(::google::protobuf::Arena* arena, RequestForSlowResponse&& from) noexcept
      : RequestForSlowResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeInSecondsToSleepFieldNumber = 1,
  };
  // required uint32 time_in_seconds_to_sleep = 1;
  bool has_time_in_seconds_to_sleep() const;
  void clear_time_in_seconds_to_sleep() ;
  ::uint32_t time_in_seconds_to_sleep() const;
  void set_time_in_seconds_to_sleep(::uint32_t value);

  private:
  ::uint32_t _internal_time_in_seconds_to_sleep() const;
  void _internal_set_time_in_seconds_to_sleep(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForSlowResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestForSlowResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t time_in_seconds_to_sleep_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mes_2eproto;
};
// -------------------------------------------------------------------

class RequestForFastResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:TestTask.Messages.RequestForFastResponse) */ {
 public:
  inline RequestForFastResponse() : RequestForFastResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestForFastResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestForFastResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestForFastResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RequestForFastResponse(const RequestForFastResponse& from) : RequestForFastResponse(nullptr, from) {}
  inline RequestForFastResponse(RequestForFastResponse&& from) noexcept
      : RequestForFastResponse(nullptr, std::move(from)) {}
  inline RequestForFastResponse& operator=(const RequestForFastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestForFastResponse& operator=(RequestForFastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestForFastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestForFastResponse* internal_default_instance() {
    return reinterpret_cast<const RequestForFastResponse*>(
        &_RequestForFastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RequestForFastResponse& a, RequestForFastResponse& b) { a.Swap(&b); }
  inline void Swap(RequestForFastResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestForFastResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestForFastResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<RequestForFastResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestForFastResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestForFastResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestTask.Messages.RequestForFastResponse"; }

 protected:
  explicit RequestForFastResponse(::google::protobuf::Arena* arena);
  RequestForFastResponse(::google::protobuf::Arena* arena, const RequestForFastResponse& from);
  RequestForFastResponse(::google::protobuf::Arena* arena, RequestForFastResponse&& from) noexcept
      : RequestForFastResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:TestTask.Messages.RequestForFastResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RequestForFastResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_mes_2eproto;
};
// -------------------------------------------------------------------

class FastResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTask.Messages.FastResponse) */ {
 public:
  inline FastResponse() : FastResponse(nullptr) {}
  ~FastResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FastResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FastResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FastResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline FastResponse(const FastResponse& from) : FastResponse(nullptr, from) {}
  inline FastResponse(FastResponse&& from) noexcept
      : FastResponse(nullptr, std::move(from)) {}
  inline FastResponse& operator=(const FastResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastResponse& operator=(FastResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FastResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FastResponse* internal_default_instance() {
    return reinterpret_cast<const FastResponse*>(
        &_FastResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FastResponse& a, FastResponse& b) { a.Swap(&b); }
  inline void Swap(FastResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FastResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FastResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FastResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FastResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FastResponse& from) { FastResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FastResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestTask.Messages.FastResponse"; }

 protected:
  explicit FastResponse(::google::protobuf::Arena* arena);
  FastResponse(::google::protobuf::Arena* arena, const FastResponse& from);
  FastResponse(::google::protobuf::Arena* arena, FastResponse&& from) noexcept
      : FastResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurrentDateTimeFieldNumber = 1,
  };
  // required string current_date_time = 1;
  bool has_current_date_time() const;
  void clear_current_date_time() ;
  const std::string& current_date_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_date_time(Arg_&& arg, Args_... args);
  std::string* mutable_current_date_time();
  PROTOBUF_NODISCARD std::string* release_current_date_time();
  void set_allocated_current_date_time(std::string* value);

  private:
  const std::string& _internal_current_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_date_time(
      const std::string& value);
  std::string* _internal_mutable_current_date_time();

  public:
  // @@protoc_insertion_point(class_scope:TestTask.Messages.FastResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FastResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr current_date_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mes_2eproto;
};
// -------------------------------------------------------------------

class WrapperMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTask.Messages.WrapperMessage) */ {
 public:
  inline WrapperMessage() : WrapperMessage(nullptr) {}
  ~WrapperMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WrapperMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WrapperMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WrapperMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline WrapperMessage(const WrapperMessage& from) : WrapperMessage(nullptr, from) {}
  inline WrapperMessage(WrapperMessage&& from) noexcept
      : WrapperMessage(nullptr, std::move(from)) {}
  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperMessage& operator=(WrapperMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrapperMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrapperMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperMessage*>(
        &_WrapperMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(WrapperMessage& a, WrapperMessage& b) { a.Swap(&b); }
  inline void Swap(WrapperMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrapperMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WrapperMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WrapperMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WrapperMessage& from) { WrapperMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WrapperMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestTask.Messages.WrapperMessage"; }

 protected:
  explicit WrapperMessage(::google::protobuf::Arena* arena);
  WrapperMessage(::google::protobuf::Arena* arena, const WrapperMessage& from);
  WrapperMessage(::google::protobuf::Arena* arena, WrapperMessage&& from) noexcept
      : WrapperMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFastResponseFieldNumber = 1,
    kSlowResponseFieldNumber = 2,
    kRequestForFastResponseFieldNumber = 3,
    kRequestForSlowResponseFieldNumber = 4,
  };
  // optional .TestTask.Messages.FastResponse fast_response = 1;
  bool has_fast_response() const;
  void clear_fast_response() ;
  const ::TestTask::Messages::FastResponse& fast_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::FastResponse* release_fast_response();
  ::TestTask::Messages::FastResponse* mutable_fast_response();
  void set_allocated_fast_response(::TestTask::Messages::FastResponse* value);
  void unsafe_arena_set_allocated_fast_response(::TestTask::Messages::FastResponse* value);
  ::TestTask::Messages::FastResponse* unsafe_arena_release_fast_response();

  private:
  const ::TestTask::Messages::FastResponse& _internal_fast_response() const;
  ::TestTask::Messages::FastResponse* _internal_mutable_fast_response();

  public:
  // optional .TestTask.Messages.SlowResponse slow_response = 2;
  bool has_slow_response() const;
  void clear_slow_response() ;
  const ::TestTask::Messages::SlowResponse& slow_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::SlowResponse* release_slow_response();
  ::TestTask::Messages::SlowResponse* mutable_slow_response();
  void set_allocated_slow_response(::TestTask::Messages::SlowResponse* value);
  void unsafe_arena_set_allocated_slow_response(::TestTask::Messages::SlowResponse* value);
  ::TestTask::Messages::SlowResponse* unsafe_arena_release_slow_response();

  private:
  const ::TestTask::Messages::SlowResponse& _internal_slow_response() const;
  ::TestTask::Messages::SlowResponse* _internal_mutable_slow_response();

  public:
  // optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
  bool has_request_for_fast_response() const;
  void clear_request_for_fast_response() ;
  const ::TestTask::Messages::RequestForFastResponse& request_for_fast_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::RequestForFastResponse* release_request_for_fast_response();
  ::TestTask::Messages::RequestForFastResponse* mutable_request_for_fast_response();
  void set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* value);
  void unsafe_arena_set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* value);
  ::TestTask::Messages::RequestForFastResponse* unsafe_arena_release_request_for_fast_response();

  private:
  const ::TestTask::Messages::RequestForFastResponse& _internal_request_for_fast_response() const;
  ::TestTask::Messages::RequestForFastResponse* _internal_mutable_request_for_fast_response();

  public:
  // optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
  bool has_request_for_slow_response() const;
  void clear_request_for_slow_response() ;
  const ::TestTask::Messages::RequestForSlowResponse& request_for_slow_response() const;
  PROTOBUF_NODISCARD ::TestTask::Messages::RequestForSlowResponse* release_request_for_slow_response();
  ::TestTask::Messages::RequestForSlowResponse* mutable_request_for_slow_response();
  void set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* value);
  void unsafe_arena_set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* value);
  ::TestTask::Messages::RequestForSlowResponse* unsafe_arena_release_request_for_slow_response();

  private:
  const ::TestTask::Messages::RequestForSlowResponse& _internal_request_for_slow_response() const;
  ::TestTask::Messages::RequestForSlowResponse* _internal_mutable_request_for_slow_response();

  public:
  // @@protoc_insertion_point(class_scope:TestTask.Messages.WrapperMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WrapperMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::TestTask::Messages::FastResponse* fast_response_;
    ::TestTask::Messages::SlowResponse* slow_response_;
    ::TestTask::Messages::RequestForFastResponse* request_for_fast_response_;
    ::TestTask::Messages::RequestForSlowResponse* request_for_slow_response_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WrapperMessage

// optional .TestTask.Messages.FastResponse fast_response = 1;
inline bool WrapperMessage::has_fast_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fast_response_ != nullptr);
  return value;
}
inline void WrapperMessage::clear_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fast_response_ != nullptr) _impl_.fast_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TestTask::Messages::FastResponse& WrapperMessage::_internal_fast_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::TestTask::Messages::FastResponse* p = _impl_.fast_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::FastResponse&>(::TestTask::Messages::_FastResponse_default_instance_);
}
inline const ::TestTask::Messages::FastResponse& WrapperMessage::fast_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.fast_response)
  return _internal_fast_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_fast_response(::TestTask::Messages::FastResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fast_response_);
  }
  _impl_.fast_response_ = reinterpret_cast<::TestTask::Messages::FastResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::release_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestTask::Messages::FastResponse* released = _impl_.fast_response_;
  _impl_.fast_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::unsafe_arena_release_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.fast_response)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TestTask::Messages::FastResponse* temp = _impl_.fast_response_;
  _impl_.fast_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::_internal_mutable_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fast_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::TestTask::Messages::FastResponse>(GetArena());
    _impl_.fast_response_ = reinterpret_cast<::TestTask::Messages::FastResponse*>(p);
  }
  return _impl_.fast_response_;
}
inline ::TestTask::Messages::FastResponse* WrapperMessage::mutable_fast_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::TestTask::Messages::FastResponse* _msg = _internal_mutable_fast_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.fast_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_fast_response(::TestTask::Messages::FastResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.fast_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fast_response_ = reinterpret_cast<::TestTask::Messages::FastResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.fast_response)
}

// optional .TestTask.Messages.SlowResponse slow_response = 2;
inline bool WrapperMessage::has_slow_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slow_response_ != nullptr);
  return value;
}
inline void WrapperMessage::clear_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slow_response_ != nullptr) _impl_.slow_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TestTask::Messages::SlowResponse& WrapperMessage::_internal_slow_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::TestTask::Messages::SlowResponse* p = _impl_.slow_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::SlowResponse&>(::TestTask::Messages::_SlowResponse_default_instance_);
}
inline const ::TestTask::Messages::SlowResponse& WrapperMessage::slow_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.slow_response)
  return _internal_slow_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_slow_response(::TestTask::Messages::SlowResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slow_response_);
  }
  _impl_.slow_response_ = reinterpret_cast<::TestTask::Messages::SlowResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::release_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TestTask::Messages::SlowResponse* released = _impl_.slow_response_;
  _impl_.slow_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::unsafe_arena_release_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.slow_response)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TestTask::Messages::SlowResponse* temp = _impl_.slow_response_;
  _impl_.slow_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::_internal_mutable_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.slow_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::TestTask::Messages::SlowResponse>(GetArena());
    _impl_.slow_response_ = reinterpret_cast<::TestTask::Messages::SlowResponse*>(p);
  }
  return _impl_.slow_response_;
}
inline ::TestTask::Messages::SlowResponse* WrapperMessage::mutable_slow_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::TestTask::Messages::SlowResponse* _msg = _internal_mutable_slow_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.slow_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_slow_response(::TestTask::Messages::SlowResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.slow_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.slow_response_ = reinterpret_cast<::TestTask::Messages::SlowResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.slow_response)
}

// optional .TestTask.Messages.RequestForFastResponse request_for_fast_response = 3;
inline bool WrapperMessage::has_request_for_fast_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_for_fast_response_ != nullptr);
  return value;
}
inline void WrapperMessage::clear_request_for_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_for_fast_response_ != nullptr) _impl_.request_for_fast_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::_internal_request_for_fast_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::TestTask::Messages::RequestForFastResponse* p = _impl_.request_for_fast_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::RequestForFastResponse&>(::TestTask::Messages::_RequestForFastResponse_default_instance_);
}
inline const ::TestTask::Messages::RequestForFastResponse& WrapperMessage::request_for_fast_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return _internal_request_for_fast_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_for_fast_response_);
  }
  _impl_.request_for_fast_response_ = reinterpret_cast<::TestTask::Messages::RequestForFastResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::release_request_for_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TestTask::Messages::RequestForFastResponse* released = _impl_.request_for_fast_response_;
  _impl_.request_for_fast_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::unsafe_arena_release_request_for_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_fast_response)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TestTask::Messages::RequestForFastResponse* temp = _impl_.request_for_fast_response_;
  _impl_.request_for_fast_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::_internal_mutable_request_for_fast_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_for_fast_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::TestTask::Messages::RequestForFastResponse>(GetArena());
    _impl_.request_for_fast_response_ = reinterpret_cast<::TestTask::Messages::RequestForFastResponse*>(p);
  }
  return _impl_.request_for_fast_response_;
}
inline ::TestTask::Messages::RequestForFastResponse* WrapperMessage::mutable_request_for_fast_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::TestTask::Messages::RequestForFastResponse* _msg = _internal_mutable_request_for_fast_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_fast_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_request_for_fast_response(::TestTask::Messages::RequestForFastResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.request_for_fast_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.request_for_fast_response_ = reinterpret_cast<::TestTask::Messages::RequestForFastResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_fast_response)
}

// optional .TestTask.Messages.RequestForSlowResponse request_for_slow_response = 4;
inline bool WrapperMessage::has_request_for_slow_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_for_slow_response_ != nullptr);
  return value;
}
inline void WrapperMessage::clear_request_for_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_for_slow_response_ != nullptr) _impl_.request_for_slow_response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::_internal_request_for_slow_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::TestTask::Messages::RequestForSlowResponse* p = _impl_.request_for_slow_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestTask::Messages::RequestForSlowResponse&>(::TestTask::Messages::_RequestForSlowResponse_default_instance_);
}
inline const ::TestTask::Messages::RequestForSlowResponse& WrapperMessage::request_for_slow_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return _internal_request_for_slow_response();
}
inline void WrapperMessage::unsafe_arena_set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_for_slow_response_);
  }
  _impl_.request_for_slow_response_ = reinterpret_cast<::TestTask::Messages::RequestForSlowResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::release_request_for_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TestTask::Messages::RequestForSlowResponse* released = _impl_.request_for_slow_response_;
  _impl_.request_for_slow_response_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::unsafe_arena_release_request_for_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestTask.Messages.WrapperMessage.request_for_slow_response)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TestTask::Messages::RequestForSlowResponse* temp = _impl_.request_for_slow_response_;
  _impl_.request_for_slow_response_ = nullptr;
  return temp;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::_internal_mutable_request_for_slow_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.request_for_slow_response_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::TestTask::Messages::RequestForSlowResponse>(GetArena());
    _impl_.request_for_slow_response_ = reinterpret_cast<::TestTask::Messages::RequestForSlowResponse*>(p);
  }
  return _impl_.request_for_slow_response_;
}
inline ::TestTask::Messages::RequestForSlowResponse* WrapperMessage::mutable_request_for_slow_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::TestTask::Messages::RequestForSlowResponse* _msg = _internal_mutable_request_for_slow_response();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.WrapperMessage.request_for_slow_response)
  return _msg;
}
inline void WrapperMessage::set_allocated_request_for_slow_response(::TestTask::Messages::RequestForSlowResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.request_for_slow_response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.request_for_slow_response_ = reinterpret_cast<::TestTask::Messages::RequestForSlowResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.WrapperMessage.request_for_slow_response)
}

// -------------------------------------------------------------------

// FastResponse

// required string current_date_time = 1;
inline bool FastResponse::has_current_date_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FastResponse::clear_current_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_date_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FastResponse::current_date_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTask.Messages.FastResponse.current_date_time)
  return _internal_current_date_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FastResponse::set_current_date_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_date_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestTask.Messages.FastResponse.current_date_time)
}
inline std::string* FastResponse::mutable_current_date_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_date_time();
  // @@protoc_insertion_point(field_mutable:TestTask.Messages.FastResponse.current_date_time)
  return _s;
}
inline const std::string& FastResponse::_internal_current_date_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_date_time_.Get();
}
inline void FastResponse::_internal_set_current_date_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_date_time_.Set(value, GetArena());
}
inline std::string* FastResponse::_internal_mutable_current_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.current_date_time_.Mutable( GetArena());
}
inline std::string* FastResponse::release_current_date_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestTask.Messages.FastResponse.current_date_time)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.current_date_time_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.current_date_time_.Set("", GetArena());
  }
  return released;
}
inline void FastResponse::set_allocated_current_date_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.current_date_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.current_date_time_.IsDefault()) {
    _impl_.current_date_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestTask.Messages.FastResponse.current_date_time)
}

// -------------------------------------------------------------------

// SlowResponse

// required uint32 connected_client_count = 1;
inline bool SlowResponse::has_connected_client_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SlowResponse::clear_connected_client_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connected_client_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SlowResponse::connected_client_count() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.SlowResponse.connected_client_count)
  return _internal_connected_client_count();
}
inline void SlowResponse::set_connected_client_count(::uint32_t value) {
  _internal_set_connected_client_count(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:TestTask.Messages.SlowResponse.connected_client_count)
}
inline ::uint32_t SlowResponse::_internal_connected_client_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connected_client_count_;
}
inline void SlowResponse::_internal_set_connected_client_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connected_client_count_ = value;
}

// -------------------------------------------------------------------

// RequestForFastResponse

// -------------------------------------------------------------------

// RequestForSlowResponse

// required uint32 time_in_seconds_to_sleep = 1;
inline bool RequestForSlowResponse::has_time_in_seconds_to_sleep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RequestForSlowResponse::clear_time_in_seconds_to_sleep() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_seconds_to_sleep_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t RequestForSlowResponse::time_in_seconds_to_sleep() const {
  // @@protoc_insertion_point(field_get:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
  return _internal_time_in_seconds_to_sleep();
}
inline void RequestForSlowResponse::set_time_in_seconds_to_sleep(::uint32_t value) {
  _internal_set_time_in_seconds_to_sleep(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:TestTask.Messages.RequestForSlowResponse.time_in_seconds_to_sleep)
}
inline ::uint32_t RequestForSlowResponse::_internal_time_in_seconds_to_sleep() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_in_seconds_to_sleep_;
}
inline void RequestForSlowResponse::_internal_set_time_in_seconds_to_sleep(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_seconds_to_sleep_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages
}  // namespace TestTask


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // mes_2eproto_2epb_2eh
